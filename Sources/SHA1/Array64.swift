// Generated by generate-fixed-size-array v1.0.0-alpha on 2022-08-26T18:35:07Z.

import FixedSizeArray

struct Array64<Element>: FixedSizeArray {
    typealias Index = Int
    
    private var storage: (
        Element, Element, Element, Element, Element, Element, Element, Element,
        Element, Element, Element, Element, Element, Element, Element, Element,
        Element, Element, Element, Element, Element, Element, Element, Element,
        Element, Element, Element, Element, Element, Element, Element, Element,
        Element, Element, Element, Element, Element, Element, Element, Element,
        Element, Element, Element, Element, Element, Element, Element, Element,
        Element, Element, Element, Element, Element, Element, Element, Element,
        Element, Element, Element, Element, Element, Element, Element, Element
    )
    
    @inline(__always)
    static var count: Int {
        64
    }
    
    @inline(__always)
    static var indices: Range<Index> {
        0..<64
    }
    
    @inline(__always)
    init(repeating element: Element) {
        storage = (
            element, element, element, element, element, element, element, element,
            element, element, element, element, element, element, element, element,
            element, element, element, element, element, element, element, element,
            element, element, element, element, element, element, element, element,
            element, element, element, element, element, element, element, element,
            element, element, element, element, element, element, element, element,
            element, element, element, element, element, element, element, element,
            element, element, element, element, element, element, element, element
        )
    }
    
    @inline(__always)
    init(
        _ e0: Element,
        _ e1: Element,
        _ e2: Element,
        _ e3: Element,
        _ e4: Element,
        _ e5: Element,
        _ e6: Element,
        _ e7: Element,
        _ e8: Element,
        _ e9: Element,
        _ e10: Element,
        _ e11: Element,
        _ e12: Element,
        _ e13: Element,
        _ e14: Element,
        _ e15: Element,
        _ e16: Element,
        _ e17: Element,
        _ e18: Element,
        _ e19: Element,
        _ e20: Element,
        _ e21: Element,
        _ e22: Element,
        _ e23: Element,
        _ e24: Element,
        _ e25: Element,
        _ e26: Element,
        _ e27: Element,
        _ e28: Element,
        _ e29: Element,
        _ e30: Element,
        _ e31: Element,
        _ e32: Element,
        _ e33: Element,
        _ e34: Element,
        _ e35: Element,
        _ e36: Element,
        _ e37: Element,
        _ e38: Element,
        _ e39: Element,
        _ e40: Element,
        _ e41: Element,
        _ e42: Element,
        _ e43: Element,
        _ e44: Element,
        _ e45: Element,
        _ e46: Element,
        _ e47: Element,
        _ e48: Element,
        _ e49: Element,
        _ e50: Element,
        _ e51: Element,
        _ e52: Element,
        _ e53: Element,
        _ e54: Element,
        _ e55: Element,
        _ e56: Element,
        _ e57: Element,
        _ e58: Element,
        _ e59: Element,
        _ e60: Element,
        _ e61: Element,
        _ e62: Element,
        _ e63: Element
    ) {
        storage = (
            e0,
            e1,
            e2,
            e3,
            e4,
            e5,
            e6,
            e7,
            e8,
            e9,
            e10,
            e11,
            e12,
            e13,
            e14,
            e15,
            e16,
            e17,
            e18,
            e19,
            e20,
            e21,
            e22,
            e23,
            e24,
            e25,
            e26,
            e27,
            e28,
            e29,
            e30,
            e31,
            e32,
            e33,
            e34,
            e35,
            e36,
            e37,
            e38,
            e39,
            e40,
            e41,
            e42,
            e43,
            e44,
            e45,
            e46,
            e47,
            e48,
            e49,
            e50,
            e51,
            e52,
            e53,
            e54,
            e55,
            e56,
            e57,
            e58,
            e59,
            e60,
            e61,
            e62,
            e63
        )
    }
}

extension Array64: Decodable where Element: AdditiveArithmetic & Decodable {}

extension Array64: Encodable where Element: Encodable {}

extension Array64: Equatable where Element: Equatable {}

extension Array64: ExpressibleByArrayLiteral where Element: AdditiveArithmetic {}

extension Array64: Hashable where Element: Hashable {}

extension Array64: Sendable where Element: Sendable {}
